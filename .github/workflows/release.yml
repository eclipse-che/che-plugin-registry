#
# Copyright (c) 2020-2021 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#

name: Release Che Plugin Registry

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'release version in format 7.y.z'
        required: true
      forceRecreateTags:
        description: If true, tags will be recreated. Use with caution
        required: false
        default: 'false'

jobs:
  release-build-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Clone source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check existing tags
        run: |
          set +e
          RECREATE_TAGS=${{ github.event.inputs.forceRecreateTags }}
          VERSION=${{ github.event.inputs.version }}
          EXISTING_TAG=$(git ls-remote --exit-code origin refs/tags/${VERSION})
          if [[ -n ${EXISTING_TAG} ]]; then
            if [[ ${RECREATE_TAGS} == "true" ]]; then
              echo "[INFO] Removing tag for ${VERSION} version. New tag will be recreated during release."
              git push origin :$VERSION
            else
              echo "[ERROR] Cannot proceed with release - tag ${EXISTING_TAG} already exists."
              exit 1
            fi
          else
            echo "[INFO] No existing tags detected for $VERSION"
          fi
      - name: Login to Quay.io
        uses: azure/docker-login@v1
        with:
          login-server: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to Docker Hub
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        name: Cache yarn dependencies
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/cache@v2
        name: Cache vsix dependencies
        id: download-unpacked-cache
        with:
          path: | 
            /tmp/che-plugin-registry/download-folder
            /tmp/che-plugin-registry/unpack-folder
          key: download-unpacked-cache-${{ hashFiles('**/che-theia-plugins.yaml') }}
          restore-keys: |
            download-unpacked-cache-

      - name: Perform release
        run: |
          git config --global user.name "Mykhailo Kuznietsov"
          git config --global user.email "mkuznets@redhat.com"

          export GITHUB_TOKEN=${{ secrets.CHE_BOT_GITHUB_TOKEN }}

          ./make-release.sh --version ${{ github.event.inputs.version}} --trigger-release
      - name: Extract content for publishing
        run: |
          docker create --name pluginRegistry quay.io/eclipse/che-plugin-registry:${{ github.event.inputs.version}} sh
          mkdir content
          docker cp pluginRegistry:/var/www/html/v3 content/v3
          docker rm -f pluginRegistry
          cp content/v3/plugins/index.json content/index.json
      - name: Publish to gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.CHE_BOT_GITHUB_TOKEN }}
          VERSION_DIR: ${{ github.event.inputs.version}}
        run: |
          export BUILD_DIR="$PWD/content"
          export GH_PAGES_DIR="$PWD/gh-pages"
          ./build/dev/publish-plugin-registry-to-gh-pages.sh
      - name: Create failure MM message
        if: ${{ failure() }}
        run: |
          echo "{\"text\":\":no_entry_sign: Che Plugin Registry ${{ github.event.inputs.version }} release has failed: https://github.com/eclipse-che/che-plugin-registry/actions/workflows/release.yml\"}" > mattermost.json
      - name: Create success MM message
        run: |
          echo "{\"text\":\":white_check_mark: Che Plugin Registry ${{ github.event.inputs.version }} has been released: https://quay.io/eclipse/che-plugin-registry:${{ github.event.inputs.version }}\"}" > mattermost.json
      - name: Send MM message
        if: ${{ success() }} || ${{ failure() }}
        uses: mattermost/action-mattermost-notify@1.0.2
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: eclipse-che-releases
          MATTERMOST_USERNAME: che-bot
