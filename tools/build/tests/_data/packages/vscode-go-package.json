{
    "name": "go",
    "displayName": "Go",
    "version": "0.19.0-dev",
    "publisher": "golang",
    "description": "Rich Go language support for Visual Studio Code",
    "author": {
      "name": "Go Team at Google"
    },
    "license": "MIT",
    "icon": "images/go-logo-blue.png",
    "categories": [
      "Programming Languages",
      "Snippets",
      "Linters",
      "Debuggers",
      "Formatters"
    ],
    "galleryBanner": {
      "color": "#F2F2F2",
      "theme": "light"
    },
    "private": true,
    "repository": {
      "type": "git",
      "url": "https://github.com/golang/vscode-go"
    },
    "bugs": {
      "url": "https://github.com/golang/vscode-go/issues"
    },
    "keywords": [
      "multi-root ready"
    ],
    "scripts": {
      "vscode:prepublish": "npm run compile",
      "webpack": "webpack --mode development",
      "webpack-dev": "webpack --mode development --watch",
      "test-compile": "tsc -p ./",
      "compile": "webpack --mode production",
      "watch": "tsc -watch -p ./",
      "test": "npm run test-compile && node ./out/test/runTest.js",
      "lint": "node ./node_modules/tslint/bin/tslint --project tsconfig.json",
      "fix-lint": "node ./node_modules/tslint/bin/tslint --fix --project tsconfig.json",
      "unit-test": "npm run test-compile && node ./node_modules/mocha/bin/_mocha -u tdd --timeout 5000 --colors ./out/test/unit",
      "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\""
    },
    "extensionDependencies": [],
    "dependencies": {
      "@types/yargs-parser": "^15.0.0",
      "deep-equal": "^2.0.2",
      "diff": "^4.0.2",
      "glob": "^7.1.6",
      "json-rpc2": "^2.0.0",
      "moment": "^2.24.0",
      "semver": "^7.3.2",
      "tree-kill": "file:third_party/tree-kill",
      "vscode-debugadapter": "^1.42.1",
      "vscode-debugadapter-testsupport": "^1.42.0",
      "vscode-debugprotocol": "^1.42.0",
      "vscode-languageclient": "^7.0.0-next.12",
      "vscode-languageserver-protocol": "^3.16.0-next.7",
      "web-request": "^1.0.7"
    },
    "devDependencies": {
      "@types/adm-zip": "^0.4.33",
      "@types/deep-equal": "^1.0.1",
      "@types/fs-extra": "^8.1.0",
      "@types/glob": "^7.1.1",
      "@types/mocha": "^7.0.2",
      "@types/node": "^13.11.1",
      "@types/semver": "^7.1.0",
      "@types/sinon": "^9.0.0",
      "@types/vscode": "^1.41.0",
      "adm-zip": "^0.4.14",
      "fs-extra": "^9.0.0",
      "get-port": "^5.1.1",
      "mocha": "^7.1.1",
      "nan": "^2.14.1",
      "prettier": "^2.0.4",
      "sinon": "^9.0.2",
      "ts-loader": "^7.0.5",
      "tslint": "^6.1.1",
      "typescript": "^3.8.3",
      "vscode-test": "^1.3.0",
      "webpack": "^4.43.0",
      "webpack-cli": "^3.3.12",
      "yarn": "^1.22.4"
    },
    "engines": {
      "vscode": "^1.46.0"
    },
    "activationEvents": [
      "workspaceContains:**/*.go",
      "onLanguage:go",
      "onCommand:go.gopath",
      "onCommand:go.tools.install",
      "onCommand:go.locate.tools",
      "onCommand:go.show.commands",
      "onDebugInitialConfigurations",
      "onDebugResolve:go"
    ],
    "main": "./dist/goMain.js",
    "contributes": {
      "languages": [
        {
          "id": "go",
          "extensions": [
            ".go"
          ],
          "aliases": [
            "Go"
          ]
        },
        {
          "id": "go.mod",
          "extensions": [
            "go.mod",
            "gopls.mod"
          ],
          "aliases": [
            "Go Module File"
          ],
          "configuration": "./languages/go.mod.language-configuration.json"
        },
        {
          "id": "go.sum",
          "extensions": [
            "go.sum"
          ],
          "aliases": [
            "Go Checksum File"
          ]
        }
      ],
      "grammars": [
        {
          "language": "go.mod",
          "scopeName": "go.mod",
          "path": "./syntaxes/go.mod.tmGrammar.json"
        },
        {
          "language": "go.sum",
          "scopeName": "go.sum",
          "path": "./syntaxes/go.sum.tmGrammar.json"
        }
      ],
      "snippets": [
        {
          "language": "go",
          "path": "./snippets/go.json"
        }
      ],
      "configurationDefaults": {
        "[go]": {
          "editor.insertSpaces": false,
          "editor.formatOnSave": true,
          "editor.codeActionsOnSave": {
            "source.organizeImports": true
          }
        }
      },
      "commands": [
        {
          "command": "go.gopath",
          "title": "Go: Current GOPATH",
          "description": "See the currently set GOPATH."
        },
        {
          "command": "go.locate.tools",
          "title": "Go: Locate Configured Go Tools",
          "description": "List all the Go tools being used by this extension along with their locations."
        },
        {
          "command": "go.test.cursor",
          "title": "Go: Test Function At Cursor",
          "description": "Runs a unit test at the cursor."
        },
        {
          "command": "go.subtest.cursor",
          "title": "Go: Subtest At Cursor",
          "description": "Runs a sub test at the cursor."
        },
        {
          "command": "go.benchmark.cursor",
          "title": "Go: Benchmark Function At Cursor",
          "description": "Runs a benchmark at the cursor."
        },
        {
          "command": "go.debug.cursor",
          "title": "Go: Debug Test At Cursor",
          "description": "Debug test at the cursor."
        },
        {
          "command": "go.test.file",
          "title": "Go: Test File",
          "description": "Runs all unit tests in the current file."
        },
        {
          "command": "go.test.package",
          "title": "Go: Test Package",
          "description": "Runs all unit tests in the package of the current file."
        },
        {
          "command": "go.benchmark.package",
          "title": "Go: Benchmark Package",
          "description": "Runs all benchmarks in the package of the current file."
        },
        {
          "command": "go.benchmark.file",
          "title": "Go: Benchmark File",
          "description": "Runs all benchmarks in the current file."
        },
        {
          "command": "go.test.workspace",
          "title": "Go: Test All Packages In Workspace",
          "description": "Runs all unit tests from all packages in the current workspace."
        },
        {
          "command": "go.test.previous",
          "title": "Go: Test Previous",
          "description": "Re-runs the last executed test."
        },
        {
          "command": "go.test.coverage",
          "title": "Go: Toggle Test Coverage In Current Package",
          "description": "Displays test coverage in the current package."
        },
        {
          "command": "go.test.generate.package",
          "title": "Go: Generate Unit Tests For Package",
          "description": "Generates unit tests for the current package"
        },
        {
          "command": "go.test.generate.file",
          "title": "Go: Generate Unit Tests For File",
          "description": "Generates unit tests for the current file"
        },
        {
          "command": "go.test.generate.function",
          "title": "Go: Generate Unit Tests For Function",
          "description": "Generates unit tests for the selected function in the current file"
        },
        {
          "command": "go.impl.cursor",
          "title": "Go: Generate Interface Stubs",
          "description": "Generates method stub for implementing the provided interface and inserts at the cursor."
        },
        {
          "command": "go.extractServerChannel",
          "title": "Go: Extract Language Server Logs To Editor",
          "description": "Extract logs in the `gopls (server)` output channel to the editor."
        },
        {
          "command": "go.toggle.gc_details",
          "title": "Go: Toggle gc details",
          "description": "Toggle the display of compiler optimization choices"
        },
        {
          "command": "go.import.add",
          "title": "Go: Add Import",
          "description": "Add an import declaration"
        },
        {
          "command": "go.add.package.workspace",
          "title": "Go: Add Package to Workspace",
          "description": "Add a package from the imports list to the workspace."
        },
        {
          "command": "go.tools.install",
          "title": "Go: Install/Update Tools",
          "description": "install/update the required go packages"
        },
        {
          "command": "go.toggle.test.file",
          "title": "Go: Toggle Test File",
          "description": "Toggles between file in current active editor and the corresponding test file."
        },
        {
          "command": "go.add.tags",
          "title": "Go: Add Tags To Struct Fields",
          "description": "Add tags configured in go.addTags setting to selected struct using gomodifytags"
        },
        {
          "command": "go.remove.tags",
          "title": "Go: Remove Tags From Struct Fields",
          "description": "Remove tags configured in go.removeTags setting from selected struct using gomodifytags"
        },
        {
          "command": "go.fill.struct",
          "title": "Go: Fill struct",
          "description": "Fill a struct literal with default values"
        },
        {
          "command": "go.show.commands",
          "title": "Go: Show All Commands...",
          "description": "Shows all commands from the Go extension in the quick pick"
        },
        {
          "command": "go.browse.packages",
          "title": "Go: Browse Packages",
          "description": "Browse packages and Go files inside the packages."
        },
        {
          "command": "go.get.package",
          "title": "Go: Get Package",
          "description": "Run `go get -v` on the package on the current line."
        },
        {
          "command": "go.playground",
          "title": "Go: Run on Go Playground",
          "description": "Upload the current selection or file to the Go Playground"
        },
        {
          "command": "go.lint.package",
          "title": "Go: Lint Current Package",
          "description": "Run linter in the package of the current file."
        },
        {
          "command": "go.lint.workspace",
          "title": "Go: Lint Workspace",
          "description": "Run linter in the current workspace."
        },
        {
          "command": "go.vet.package",
          "title": "Go: Vet Current Package",
          "description": "Run go vet in the package of the current file."
        },
        {
          "command": "go.vet.workspace",
          "title": "Go: Vet Workspace",
          "description": "Run go vet in the current workspace."
        },
        {
          "command": "go.build.package",
          "title": "Go: Build Current Package",
          "description": "Build the package of the current file."
        },
        {
          "command": "go.build.workspace",
          "title": "Go: Build Workspace",
          "description": "Build the current workspace."
        },
        {
          "command": "go.install.package",
          "title": "Go: Install Current Package",
          "description": "Install the current package."
        },
        {
          "command": "go.test.cancel",
          "title": "Go: Cancel Running Tests",
          "description": "Cancels running tests."
        },
        {
          "command": "go.apply.coverprofile",
          "title": "Go: Apply Cover Profile",
          "description": "Applies existing cover profile."
        },
        {
          "command": "go.godoctor.extract",
          "title": "Go: Extract to function",
          "description": "Extract to function using godoctor."
        },
        {
          "command": "go.godoctor.var",
          "title": "Go: Extract to variable",
          "description": "Extract to variable using godoctor."
        },
        {
          "command": "go.languageserver.restart",
          "title": "Go: Restart Language Server",
          "description": "Restart the running instance of the language server"
        },
        {
          "command": "go.environment.choose",
          "title": "Go: Choose Go Environment",
          "description": "Choose a different Go version or binary for this project. (WIP)"
        },
        {
          "command": "go.survey.showConfig",
          "title": "Go: Show Survey Configuration",
          "description": "Show the current Go survey configuration"
        },
        {
          "command": "go.survey.resetConfig",
          "title": "Go: Reset Survey Configuration",
          "description": "Reset the current Go survey configuration history"
        }
      ],
      "breakpoints": [
        {
          "language": "go"
        }
      ],
      "debuggers": [
        {
          "type": "go",
          "label": "Go",
          "program": "./dist/debugAdapter.js",
          "runtime": "node",
          "languages": [
            "go"
          ],
          "configurationSnippets": [
            {
              "label": "Go: Launch package",
              "description": "Debug the package in the program attribute",
              "body": {
                "name": "${2:Launch Package}",
                "type": "go",
                "request": "launch",
                "mode": "debug",
                "program": "^\"\\${workspaceFolder}${1:}\""
              }
            },
            {
              "label": "Go: Launch file",
              "description": "Debug the file in the program attribute",
              "body": {
                "name": "${2:Launch file}",
                "type": "go",
                "request": "launch",
                "mode": "debug",
                "program": "^\"${1:\\${file\\}}\""
              }
            },
            {
              "label": "Go: Launch test package",
              "description": "Debug the test package in the program attribute",
              "body": {
                "name": "${2:Launch test package}",
                "type": "go",
                "request": "launch",
                "mode": "test",
                "program": "^\"\\${workspaceFolder}${1:}\""
              }
            },
            {
              "label": "Go: Launch test function",
              "description": "Debug the test function in the args, ensure program attributes points to right package",
              "body": {
                "name": "${3:Launch test function}",
                "type": "go",
                "request": "launch",
                "mode": "test",
                "program": "^\"\\${workspaceFolder}${1:}\"",
                "args": [
                  "-test.run",
                  "${2:MyTestFunction}"
                ]
              }
            },
            {
              "label": "Go: Attach to local process",
              "description": "Attach to an existing process by process ID",
              "body": {
                "name": "${1:Attach to Process}",
                "type": "go",
                "request": "attach",
                "mode": "local",
                "processId": 0
              }
            },
            {
              "label": "Go: Connect to server",
              "description": "Connect to a remote headless debug server",
              "body": {
                "name": "${1:Connect to server}",
                "type": "go",
                "request": "attach",
                "mode": "remote",
                "remotePath": "^\"\\${workspaceFolder}\"",
                "port": 2345,
                "host": "127.0.0.1"
              }
            }
          ],
          "configurationAttributes": {
            "launch": {
              "required": [],
              "properties": {
                "program": {
                  "type": "string",
                  "description": "Path to the program folder (or any file within that folder) when in 'debug' or 'test' mode, and to the pre-built binary file to debug in 'exec' mode.",
                  "default": "${workspaceFolder}"
                },
                "mode": {
                  "enum": [
                    "auto",
                    "debug",
                    "remote",
                    "test",
                    "exec"
                  ],
                  "description": "One of 'auto', 'debug', 'remote', 'test', 'exec'.",
                  "default": "auto"
                },
                "stopOnEntry": {
                  "type": "boolean",
                  "description": "Automatically stop program after launch.",
                  "default": false
                },
                "args": {
                  "type": "array",
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "showLog": {
                  "type": "boolean",
                  "description": "Show log output from the delve debugger.",
                  "default": false
                },
                "cwd": {
                  "type": "string",
                  "description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
                  "default": "."
                },
                "env": {
                  "type": "object",
                  "description": "Environment variables passed to the program.",
                  "default": {}
                },
                "buildFlags": {
                  "type": "string",
                  "description": "Build flags, to be passed to the Go compiler.",
                  "default": ""
                },
                "init": {
                  "type": "string",
                  "description": "Init file, executed by the terminal client.",
                  "default": ""
                },
                "remotePath": {
                  "type": "string",
                  "description": "Absolute path to the file being debugged on the remote machine in case of remote debugging.",
                  "default": ""
                },
                "port": {
                  "type": "number",
                  "description": "The port that the delve debugger will be listening on.",
                  "default": 2345
                },
                "host": {
                  "type": "string",
                  "description": "The host name of the machine the delve debugger will be listening on.",
                  "default": "127.0.0.1"
                },
                "trace": {
                  "type": "string",
                  "enum": [
                    "log",
                    "verbose",
                    "error"
                  ],
                  "default": "error",
                  "description": "Various levels of logging shown in the debug console. When set to 'log' or 'verbose', the logs will also be written to a file."
                },
                "envFile": {
                  "type": [
                    "string",
                    "array"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "description": "Absolute path to a file containing environment variable definitions. Multiple files can be specified by provided an array of absolute paths",
                  "default": "${workspaceFolder}/.env"
                },
                "backend": {
                  "type": "string",
                  "enum": [
                    "default",
                    "native",
                    "lldb"
                  ],
                  "description": "Backend used by delve. Only available in delve version 0.12.2 and above."
                },
                "output": {
                  "type": "string",
                  "description": "Output path for the binary of delve",
                  "default": "debug"
                },
                "logOutput": {
                  "type": "string",
                  "enum": [
                    "debugger",
                    "gdbwire",
                    "lldbout",
                    "debuglineerr",
                    "rpc"
                  ],
                  "description": "Comma separated list of components that should produce debug output.",
                  "default": "debugger"
                },
                "dlvLoadConfig": {
                  "type": "object",
                  "properties": {
                    "followPointers": {
                      "type": "boolean",
                      "description": "FollowPointers requests pointers to be automatically dereferenced",
                      "default": true
                    },
                    "maxVariableRecurse": {
                      "type": "number",
                      "description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
                      "default": 1
                    },
                    "maxStringLen": {
                      "type": "number",
                      "description": "MaxStringLen is the maximum number of bytes read from a string",
                      "default": 64
                    },
                    "maxArrayValues": {
                      "type": "number",
                      "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
                      "default": 64
                    },
                    "maxStructFields": {
                      "type": "number",
                      "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
                      "default": -1
                    }
                  },
                  "description": "LoadConfig describes to delve, how to load values from target's memory",
                  "default": {
                    "followPointers": true,
                    "maxVariableRecurse": 1,
                    "maxStringLen": 64,
                    "maxArrayValues": 64,
                    "maxStructFields": -1
                  }
                },
                "apiVersion": {
                  "type": "number",
                  "enum": [
                    1,
                    2
                  ],
                  "description": "Delve Api Version to use. Default value is 2.",
                  "default": 2
                },
                "stackTraceDepth": {
                  "type": "number",
                  "description": "Maximum depth of stack trace collected from Delve",
                  "default": 50
                },
                "showGlobalVariables": {
                  "type": "boolean",
                  "default": false,
                  "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not."
                }
              }
            },
            "attach": {
              "required": [],
              "properties": {
                "processId": {
                  "type": "number",
                  "description": "The ID of the process to be debugged."
                },
                "mode": {
                  "enum": [
                    "local",
                    "remote"
                  ],
                  "description": "Indicates local or remote debugging.  Local maps to the dlv 'attach' command, remote maps to 'connect'.",
                  "default": "local"
                },
                "showLog": {
                  "type": "boolean",
                  "description": "Show log output from the delve debugger.",
                  "default": false
                },
                "cwd": {
                  "type": "string",
                  "description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
                  "default": "${workspaceFolder}"
                },
                "remotePath": {
                  "type": "string",
                  "description": "If remote debugging, the path to the source code on the remote machine, if different from the local machine.",
                  "default": ""
                },
                "port": {
                  "type": "number",
                  "description": "The port that the delve debugger will be listening on.",
                  "default": 2345
                },
                "host": {
                  "type": "string",
                  "description": "The host name of the machine the delve debugger will be listening on.",
                  "default": "127.0.0.1"
                },
                "trace": {
                  "type": "string",
                  "enum": [
                    "log",
                    "verbose",
                    "error"
                  ],
                  "default": "error",
                  "description": "Various levels of logging shown in the debug console. When set to 'log' or 'verbose', the logs will also be written to a file."
                },
                "backend": {
                  "type": "string",
                  "enum": [
                    "default",
                    "native",
                    "lldb"
                  ],
                  "description": "Backend used by delve. Only available in delve version 0.12.2 and above."
                },
                "logOutput": {
                  "type": "string",
                  "enum": [
                    "debugger",
                    "gdbwire",
                    "lldbout",
                    "debuglineerr",
                    "rpc"
                  ],
                  "description": "Comma separated list of components that should produce debug output.",
                  "default": "debugger"
                },
                "dlvLoadConfig": {
                  "type": "object",
                  "properties": {
                    "followPointers": {
                      "type": "boolean",
                      "description": "FollowPointers requests pointers to be automatically dereferenced",
                      "default": true
                    },
                    "maxVariableRecurse": {
                      "type": "number",
                      "description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
                      "default": 1
                    },
                    "maxStringLen": {
                      "type": "number",
                      "description": "MaxStringLen is the maximum number of bytes read from a string",
                      "default": 64
                    },
                    "maxArrayValues": {
                      "type": "number",
                      "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
                      "default": 64
                    },
                    "maxStructFields": {
                      "type": "number",
                      "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
                      "default": -1
                    }
                  },
                  "description": "LoadConfig describes to delve, how to load values from target's memory",
                  "default": {
                    "followPointers": true,
                    "maxVariableRecurse": 1,
                    "maxStringLen": 64,
                    "maxArrayValues": 64,
                    "maxStructFields": -1
                  }
                },
                "apiVersion": {
                  "type": "number",
                  "enum": [
                    1,
                    2
                  ],
                  "description": "Delve Api Version to use. Default value is 2.",
                  "default": 2
                },
                "stackTraceDepth": {
                  "type": "number",
                  "description": "Maximum depth of stack trace collected from Delve",
                  "default": 50
                },
                "showGlobalVariables": {
                  "type": "boolean",
                  "default": false,
                  "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not."
                }
              }
            }
          }
        },
        {
          "type": "godlvdap",
          "label": "Go Dlv Dap (Experimental)",
          "program": "./dist/debugAdapter2.js",
          "runtime": "node",
          "languages": [
            "go"
          ],
          "configurationSnippets": [
            {
              "label": "Go: Launch package",
              "description": "Debug the package in the program attribute",
              "body": {
                "name": "${2:Launch Package}",
                "type": "godlvdap",
                "request": "launch",
                "mode": "debug",
                "program": "^\"\\${workspaceFolder}${1:}\""
              }
            },
            {
              "label": "Go: Launch file",
              "description": "Debug the file in the program attribute",
              "body": {
                "name": "${2:Launch file}",
                "type": "godlvdap",
                "request": "launch",
                "mode": "debug",
                "program": "^\"${1:\\${file\\}}\""
              }
            },
            {
              "label": "Go: Launch test package",
              "description": "Debug the test package in the program attribute",
              "body": {
                "name": "${2:Launch test package}",
                "type": "godlvdap",
                "request": "launch",
                "mode": "test",
                "program": "^\"\\${workspaceFolder}${1:}\""
              }
            },
            {
              "label": "Go: Launch test function",
              "description": "Debug the test function in the args, ensure program attributes points to right package",
              "body": {
                "name": "${3:Launch test function}",
                "type": "godlvdap",
                "request": "launch",
                "mode": "test",
                "program": "^\"\\${workspaceFolder}${1:}\"",
                "args": [
                  "-test.run",
                  "${2:MyTestFunction}"
                ]
              }
            },
            {
              "label": "Go: Attach to local process",
              "description": "Attach to an existing process by process ID",
              "body": {
                "name": "${1:Attach to Process}",
                "type": "godlvdap",
                "request": "attach",
                "mode": "local",
                "processId": 0
              }
            },
            {
              "label": "Go: Connect to server",
              "description": "Connect to a remote headless debug server",
              "body": {
                "name": "${1:Connect to server}",
                "type": "godlvdap",
                "request": "attach",
                "mode": "remote",
                "remotePath": "^\"\\${workspaceFolder}\"",
                "port": 2345,
                "host": "127.0.0.1"
              }
            }
          ],
          "configurationAttributes": {
            "launch": {
              "required": [],
              "properties": {
                "program": {
                  "type": "string",
                  "description": "Path to the program folder (or any file within that folder) when in 'debug' or 'test' mode, and to the pre-built binary file to debug in 'exec' mode.",
                  "default": "${workspaceFolder}"
                },
                "mode": {
                  "enum": [
                    "auto",
                    "debug",
                    "test",
                    "exec"
                  ],
                  "description": "One of 'auto', 'debug', 'test', 'exec'.",
                  "default": "auto"
                },
                "stopOnEntry": {
                  "type": "boolean",
                  "description": "Automatically stop program after launch.",
                  "default": false
                },
                "args": {
                  "type": "array",
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "showLog": {
                  "type": "boolean",
                  "description": "Show log output from the delve debugger.",
                  "default": false
                },
                "cwd": {
                  "type": "string",
                  "description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
                  "default": "."
                },
                "env": {
                  "type": "object",
                  "description": "Environment variables passed to the program.",
                  "default": {}
                },
                "buildFlags": {
                  "type": "string",
                  "description": "Build flags, to be passed to the Go compiler.",
                  "default": ""
                },
                "init": {
                  "type": "string",
                  "description": "Init file, executed by the terminal client.",
                  "default": ""
                },
                "remotePath": {
                  "type": "string",
                  "description": "Absolute path to the file being debugged on the remote machine in case of remote debugging.",
                  "default": ""
                },
                "port": {
                  "type": "number",
                  "description": "The port that the delve debugger will be listening on.",
                  "default": 2345
                },
                "host": {
                  "type": "string",
                  "description": "The host name of the machine the delve debugger will be listening on.",
                  "default": "127.0.0.1"
                },
                "trace": {
                  "type": "string",
                  "enum": [
                    "log",
                    "verbose",
                    "error"
                  ],
                  "default": "error",
                  "description": "Various levels of logging shown in the debug console. When set to 'log' or 'verbose', the logs will also be written to a file."
                },
                "envFile": {
                  "type": [
                    "string",
                    "array"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "description": "Absolute path to a file containing environment variable definitions. Multiple files can be specified by provided an array of absolute paths",
                  "default": "${workspaceFolder}/.env"
                },
                "backend": {
                  "type": "string",
                  "enum": [
                    "default",
                    "native",
                    "lldb"
                  ],
                  "description": "Backend used by delve. Only available in delve version 0.12.2 and above."
                },
                "output": {
                  "type": "string",
                  "description": "Output path for the binary of delve",
                  "default": "debug"
                },
                "logOutput": {
                  "type": "string",
                  "enum": [
                    "debugger",
                    "gdbwire",
                    "lldbout",
                    "debuglineerr",
                    "dap"
                  ],
                  "description": "Comma separated list of components that should produce debug output.",
                  "default": "debugger"
                },
                "dlvLoadConfig": {
                  "type": "object",
                  "properties": {
                    "followPointers": {
                      "type": "boolean",
                      "description": "FollowPointers requests pointers to be automatically dereferenced",
                      "default": true
                    },
                    "maxVariableRecurse": {
                      "type": "number",
                      "description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
                      "default": 1
                    },
                    "maxStringLen": {
                      "type": "number",
                      "description": "MaxStringLen is the maximum number of bytes read from a string",
                      "default": 64
                    },
                    "maxArrayValues": {
                      "type": "number",
                      "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
                      "default": 64
                    },
                    "maxStructFields": {
                      "type": "number",
                      "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
                      "default": -1
                    }
                  },
                  "description": "LoadConfig describes to delve, how to load values from target's memory",
                  "default": {
                    "followPointers": true,
                    "maxVariableRecurse": 1,
                    "maxStringLen": 64,
                    "maxArrayValues": 64,
                    "maxStructFields": -1
                  }
                },
                "stackTraceDepth": {
                  "type": "number",
                  "description": "Maximum depth of stack trace collected from Delve",
                  "default": 50
                },
                "showGlobalVariables": {
                  "type": "boolean",
                  "default": false,
                  "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not."
                }
              }
            },
            "attach": {
              "required": [],
              "properties": {
                "processId": {
                  "type": "number",
                  "description": "The ID of the process to be debugged."
                },
                "mode": {
                  "enum": [
                    "local",
                    "remote"
                  ],
                  "description": "Indicates local or remote debugging.  Local maps to the dlv 'attach' command, remote maps to 'connect'.",
                  "default": "local"
                },
                "showLog": {
                  "type": "boolean",
                  "description": "Show log output from the delve debugger.",
                  "default": false
                },
                "cwd": {
                  "type": "string",
                  "description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
                  "default": "${workspaceFolder}"
                },
                "remotePath": {
                  "type": "string",
                  "description": "If remote debugging, the path to the source code on the remote machine, if different from the local machine.",
                  "default": ""
                },
                "port": {
                  "type": "number",
                  "description": "The port that the delve debugger will be listening on.",
                  "default": 2345
                },
                "host": {
                  "type": "string",
                  "description": "The host name of the machine the delve debugger will be listening on.",
                  "default": "127.0.0.1"
                },
                "trace": {
                  "type": "string",
                  "enum": [
                    "log",
                    "verbose",
                    "error"
                  ],
                  "default": "error",
                  "description": "Various levels of logging shown in the debug console. When set to 'log' or 'verbose', the logs will also be written to a file."
                },
                "backend": {
                  "type": "string",
                  "enum": [
                    "default",
                    "native",
                    "lldb"
                  ],
                  "description": "Backend used by delve. Only available in delve version 0.12.2 and above."
                },
                "logOutput": {
                  "type": "string",
                  "enum": [
                    "debugger",
                    "gdbwire",
                    "lldbout",
                    "debuglineerr",
                    "dap",
                    "rpc"
                  ],
                  "description": "Comma separated list of components that should produce debug output.",
                  "default": "debugger"
                },
                "dlvLoadConfig": {
                  "type": "object",
                  "properties": {
                    "followPointers": {
                      "type": "boolean",
                      "description": "FollowPointers requests pointers to be automatically dereferenced",
                      "default": true
                    },
                    "maxVariableRecurse": {
                      "type": "number",
                      "description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
                      "default": 1
                    },
                    "maxStringLen": {
                      "type": "number",
                      "description": "MaxStringLen is the maximum number of bytes read from a string",
                      "default": 64
                    },
                    "maxArrayValues": {
                      "type": "number",
                      "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
                      "default": 64
                    },
                    "maxStructFields": {
                      "type": "number",
                      "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
                      "default": -1
                    }
                  },
                  "description": "LoadConfig describes to delve, how to load values from target's memory",
                  "default": {
                    "followPointers": true,
                    "maxVariableRecurse": 1,
                    "maxStringLen": 64,
                    "maxArrayValues": 64,
                    "maxStructFields": -1
                  }
                },
                "stackTraceDepth": {
                  "type": "number",
                  "description": "Maximum depth of stack trace collected from Delve",
                  "default": 50
                },
                "showGlobalVariables": {
                  "type": "boolean",
                  "default": false,
                  "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not."
                }
              }
            }
          }
        }
      ],
      "configuration": {
        "type": "object",
        "title": "Go",
        "properties": {
          "go.buildOnSave": {
            "type": "string",
            "enum": [
              "package",
              "workspace",
              "off"
            ],
            "default": "package",
            "description": "Compiles code on file save using 'go build -i' or 'go test -c -i'. Options are 'workspace', 'package', or 'off'.",
            "scope": "resource"
          },
          "go.buildFlags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. [\"-ldflags='-s'\"])",
            "scope": "resource"
          },
          "go.buildTags": {
            "type": "string",
            "default": "",
            "description": "The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set.",
            "scope": "resource"
          },
          "go.testTags": {
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "description": "The Go build tags to use for when running tests. If null, then buildTags will be used.",
            "scope": "resource"
          },
          "go.installDependenciesWhenBuilding": {
            "type": "boolean",
            "default": false,
            "description": "If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.",
            "scope": "resource"
          },
          "go.lintOnSave": {
            "type": "string",
            "enum": [
              "file",
              "package",
              "workspace",
              "off"
            ],
            "default": "package",
            "description": "Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.",
            "scope": "resource"
          },
          "go.lintTool": {
            "type": "string",
            "default": "golint",
            "description": "Specifies Lint tool name.",
            "scope": "resource",
            "enum": [
              "golint",
              "golangci-lint",
              "revive",
              "staticcheck"
            ]
          },
          "go.lintFlags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Flags to pass to Lint tool (e.g. [\"-min_confidence=.8\"])",
            "scope": "resource"
          },
          "go.vetOnSave": {
            "type": "string",
            "enum": [
              "package",
              "workspace",
              "off"
            ],
            "default": "package",
            "description": "Vets code on file save using 'go tool vet'.",
            "scope": "resource"
          },
          "go.vetFlags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Flags to pass to `go tool vet` (e.g. [\"-all\", \"-shadow\"])",
            "scope": "resource"
          },
          "go.formatTool": {
            "type": "string",
            "default": "goreturns",
            "description": "Not applicable when using the language server. Choosing 'goimports', 'goreturns', or 'gofumports' will add missing imports and remove unused imports.",
            "scope": "resource",
            "enum": [
              "gofmt",
              "goimports",
              "goreturns",
              "goformat",
              "gofumpt",
              "gofumports"
            ]
          },
          "go.formatFlags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Flags to pass to format tool (e.g. [\"-s\"])",
            "scope": "resource"
          },
          "go.inferGopath": {
            "type": "boolean",
            "default": false,
            "description": "Infer GOPATH from the workspace root.",
            "scope": "resource"
          },
          "go.gopath": {
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "description": "Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.",
            "scope": "machine-overridable"
          },
          "go.toolsGopath": {
            "type": "string",
            "default": "",
            "description": "Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.",
            "scope": "machine-overridable"
          },
          "go.goroot": {
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "description": "Specifies the GOROOT to use when no environment variable is set.",
            "scope": "machine-overridable"
          },
          "go.testOnSave": {
            "type": "boolean",
            "default": false,
            "description": "Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.",
            "scope": "resource"
          },
          "go.coverOnSave": {
            "type": "boolean",
            "default": false,
            "description": "If true, runs 'go test -coverprofile' on save and shows test coverage.",
            "scope": "resource"
          },
          "go.coverOnTestPackage": {
            "type": "boolean",
            "default": true,
            "description": "If true, shows test coverage when Go: Test Package command is run."
          },
          "go.coverOnSingleTest": {
            "type": "boolean",
            "default": false,
            "description": "If true, shows test coverage when Go: Test Function at cursor command is run."
          },
          "go.coverOnSingleTestFile": {
            "type": "boolean",
            "default": false,
            "description": "If true, shows test coverage when Go: Test Single File command is run."
          },
          "go.coverMode": {
            "type": "string",
            "enum": [
              "default",
              "set",
              "count",
              "atomic"
            ],
            "default": "default",
            "description": "When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.",
            "scope": "resource"
          },
          "go.coverShowCounts": {
            "type": "boolean",
            "default": false,
            "description": "When generating code coverage, should counts be shown as --374--",
            "scope": "resource"
          },
          "go.coverageOptions": {
            "type": "string",
            "enum": [
              "showCoveredCodeOnly",
              "showUncoveredCodeOnly",
              "showBothCoveredAndUncoveredCode"
            ],
            "default": "showBothCoveredAndUncoveredCode",
            "description": "Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage",
            "scope": "resource"
          },
          "go.coverageDecorator": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "highlight",
                  "gutter"
                ]
              },
              "coveredHighlightColor": {
                "type": "string",
                "description": "Color in the rgba format to use to highlight covered code."
              },
              "uncoveredHighlightColor": {
                "type": "string",
                "description": "Color in the rgba format to use to highlight uncovered code."
              },
              "coveredBorderColor": {
                "type": "string",
                "description": "Color to use for the border of covered code."
              },
              "uncoveredBorderColor": {
                "type": "string",
                "description": "Color to use for the border of uncovered code."
              },
              "coveredGutterStyle": {
                "type": "string",
                "enum": [
                  "blockblue",
                  "blockred",
                  "blockgreen",
                  "blockyellow",
                  "slashred",
                  "slashgreen",
                  "slashblue",
                  "slashyellow",
                  "verticalred",
                  "verticalgreen",
                  "verticalblue",
                  "verticalyellow"
                ],
                "description": "Gutter style to indicate covered code."
              },
              "uncoveredGutterStyle": {
                "type": "string",
                "enum": [
                  "blockblue",
                  "blockred",
                  "blockgreen",
                  "blockyellow",
                  "slashred",
                  "slashgreen",
                  "slashblue",
                  "slashyellow",
                  "verticalred",
                  "verticalgreen",
                  "verticalblue",
                  "verticalyellow"
                ],
                "description": "Gutter style to indicate covered code."
              }
            },
            "additionalProperties": false,
            "default": {
              "type": "highlight",
              "coveredHighlightColor": "rgba(64,128,128,0.5)",
              "uncoveredHighlightColor": "rgba(128,64,64,0.25)",
              "coveredBorderColor": "rgba(64,128,128,0.5)",
              "uncoveredBorderColor": "rgba(128,64,64,0.25)",
              "coveredGutterStyle": "blockblue",
              "uncoveredGutterStyle": "slashyellow"
            },
            "description": "This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.",
            "scope": "resource"
          },
          "go.testTimeout": {
            "type": "string",
            "default": "30s",
            "description": "Specifies the timeout for go test in ParseDuration format.",
            "scope": "resource"
          },
          "go.testEnvVars": {
            "type": "object",
            "default": {},
            "description": "Environment variables that will passed to the process that runs the Go tests",
            "scope": "resource"
          },
          "go.testEnvFile": {
            "type": "string",
            "default": null,
            "description": "Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.",
            "scope": "resource"
          },
          "go.testFlags": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "default": null,
            "description": "Flags to pass to `go test`. If null, then buildFlags will be used.",
            "scope": "resource"
          },
          "go.generateTestsFlags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Additional command line flags to pass to `gotests` for generating tests.",
            "scope": "resource"
          },
          "go.toolsEnvVars": {
            "type": "object",
            "default": {},
            "description": "Environment variables that will passed to the processes that run the Go tools (e.g. CGO_CFLAGS)",
            "scope": "resource"
          },
          "go.gocodeFlags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "-builtin",
              "-ignore-case",
              "-unimported-packages"
            ],
            "description": "Additional flags to pass to gocode. Not applicable when using the language server.",
            "scope": "resource"
          },
          "go.gocodeAutoBuild": {
            "type": "boolean",
            "default": false,
            "description": "Enable gocode's autobuild feature. Not applicable when using the language server.",
            "scope": "resource"
          },
          "go.gocodePackageLookupMode": {
            "type": "string",
            "enum": [
              "go",
              "gb",
              "bzl"
            ],
            "default": "go",
            "description": "Used to determine the Go package lookup rules for completions by gocode. Only applies when using nsf/gocode. Latest versions of the Go extension uses mdempsky/gocode by default. Not applicable when using the language server.",
            "scope": "resource"
          },
          "go.useCodeSnippetsOnFunctionSuggest": {
            "type": "boolean",
            "default": false,
            "description": "Complete functions with their parameter signature, including the variable types",
            "scope": "resource"
          },
          "go.useCodeSnippetsOnFunctionSuggestWithoutType": {
            "type": "boolean",
            "default": false,
            "description": "Complete functions with their parameter signature, excluding the variable types",
            "scope": "resource"
          },
          "go.autocompleteUnimportedPackages": {
            "type": "boolean",
            "default": false,
            "description": "Include unimported packages in auto-complete suggestions.",
            "scope": "resource"
          },
          "go.docsTool": {
            "type": "string",
            "default": "godoc",
            "description": "Pick 'godoc' or 'gogetdoc' to get documentation. Not applicable when using the language server.",
            "scope": "resource",
            "enum": [
              "godoc",
              "gogetdoc",
              "guru"
            ]
          },
          "go.useLanguageServer": {
            "type": "boolean",
            "default": false,
            "description": "Use the Go language server \"gopls\" from Google for powering language features like code navigation, completion, formatting & diagnostics."
          },
          "go.languageServerFlags": {
            "type": "array",
            "default": [],
            "description": "Flags like -rpc.trace and -logfile to be used while running the language server."
          },
          "go.languageServerExperimentalFeatures": {
            "type": "object",
            "properties": {
              "diagnostics": {
                "type": "boolean",
                "default": true,
                "description": "If true, the language server will provide build, vet errors and the extension will ignore the `buildOnSave`, `vetOnSave` settings."
              },
              "documentLink": {
                "type": "boolean",
                "default": true,
                "description": "If true, the language server will provide clickable Godoc links for import statements."
              }
            },
            "additionalProperties": false,
            "default": {
              "diagnostics": true,
              "documentLink": true
            },
            "description": "Use this setting to enable/disable experimental features from the language server."
          },
          "go.trace.server": {
            "type": "string",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "default": "off",
            "description": "Trace the communication between VS Code and the Go language server."
          },
          "go.logging.level": {
            "type": "string",
            "default": "error",
            "enum": [
              "off",
              "error",
              "info",
              "verbose"
            ],
            "description": "The logging level the extension logs at, defaults to 'error'",
            "scope": "machine-overridable"
          },
          "go.useGoProxyToCheckForToolUpdates": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, the extension automatically checks the Go proxy if there are updates available for Go and the Go tools (at present, only gopls) it depends on and prompts the user accordingly"
          },
          "go.gotoSymbol.includeImports": {
            "type": "boolean",
            "default": false,
            "description": "If false, the import statements will be excluded while using the Go to Symbol in File feature",
            "scope": "resource"
          },
          "go.gotoSymbol.includeGoroot": {
            "type": "boolean",
            "default": false,
            "description": "If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature",
            "scope": "resource"
          },
          "go.enableCodeLens": {
            "type": "object",
            "properties": {
              "references": {
                "type": "boolean",
                "default": false,
                "description": "If true, enables the references code lens. Uses guru. Recalculates when there is change to the document followed by scrolling."
              },
              "runtest": {
                "type": "boolean",
                "default": true,
                "description": "If true, enables code lens for running and debugging tests"
              }
            },
            "additionalProperties": false,
            "default": {
              "references": false,
              "runtest": true
            },
            "description": "Feature level setting to enable/disable code lens for references and run/debug tests",
            "scope": "resource"
          },
          "go.overwriteGoplsMiddleware": {
            "type": "object",
            "properties": {
              "codelens": {
                "type": "object",
                "properties": {
                  "test": {
                    "type": "boolean",
                    "default": false,
                    "description": "'test' codelens will be handled by gopls if true"
                  },
                  "bench": {
                    "type": "boolean",
                    "default": false,
                    "description": "'benchmark' codelens will be handled by gopls if true"
                  }
                }
              },
              "default": {
                "codelens": {
                  "test": false,
                  "bench": false
                }
              }
            },
            "scope": "resource",
            "description": "This option provides a set of flags which determine if vscode-go should intercept certain commands from gopls. These flags assume the `gopls` settings, which enable codelens from gopls, are also present."
          },
          "go.addTags": {
            "type": "object",
            "properties": {
              "promptForTags": {
                "type": "boolean",
                "default": false,
                "description": "If true, Go: Add Tags command will prompt the user to provide tags and options instead of using the configured values"
              },
              "tags": {
                "type": "string",
                "default": "json",
                "description": "Comma separated tags to be used by Go: Add Tags command"
              },
              "options": {
                "type": "string",
                "default": "json=omitempty",
                "description": "Comma separated tag=options pairs to be used by Go: Add Tags command"
              },
              "transform": {
                "type": "string",
                "enum": [
                  "snakecase",
                  "camelcase",
                  "lispcase",
                  "pascalcase",
                  "keep"
                ],
                "default": "snakecase",
                "description": "Transformation rule used by Go: Add Tags command to add tags"
              }
            },
            "additionalProperties": false,
            "default": {
              "tags": "json",
              "options": "json=omitempty",
              "promptForTags": false,
              "transform": "snakecase",
              "template": ""
            },
            "description": "Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.",
            "scope": "resource"
          },
          "go.liveErrors": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "default": false,
                "description": "If true, runs gotype on the file currently being edited and reports any semantic or syntactic errors found."
              },
              "delay": {
                "type": "number",
                "default": 500,
                "description": "The number of milliseconds to delay before execution. Resets with each keystroke."
              }
            },
            "additionalProperties": false,
            "default": {
              "enabled": false,
              "delay": 500
            },
            "description": "Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay.",
            "scope": "resource"
          },
          "go.removeTags": {
            "type": "object",
            "properties": {
              "promptForTags": {
                "type": "boolean",
                "default": false,
                "description": "If true, Go: Remove Tags command will prompt the user to provide tags and options instead of using the configured values"
              },
              "tags": {
                "type": "string",
                "default": "json",
                "description": "Comma separated tags to be used by Go: Remove Tags command"
              },
              "options": {
                "type": "string",
                "default": "json=omitempty",
                "description": "Comma separated tag=options pairs to be used by Go: Remove Tags command"
              }
            },
            "additionalProperties": false,
            "default": {
              "tags": "",
              "options": "",
              "promptForTags": false
            },
            "description": "Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.",
            "scope": "resource"
          },
          "go.playground": {
            "type": "object",
            "properties": {
              "openbrowser": {
                "type": "boolean",
                "default": true,
                "description": "Whether to open the created Go Playground in the default browser"
              },
              "share": {
                "type": "boolean",
                "default": true,
                "description": "Whether to make the created Go Playground shareable"
              },
              "run": {
                "type": "boolean",
                "default": true,
                "description": "Whether to run the created Go Playground after creation"
              }
            },
            "description": "The flags configured here will be passed through to command `goplay`",
            "additionalProperties": false,
            "default": {
              "openbrowser": true,
              "share": true,
              "run": true
            }
          },
          "go.editorContextMenuCommands": {
            "type": "object",
            "properties": {
              "toggleTestFile": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to toggle between a Go file and its test file to the editor context menu"
              },
              "addTags": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to add configured tags from struct fields to the editor context menu"
              },
              "removeTags": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to remove configured tags from struct fields to the editor context menu"
              },
              "fillStruct": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to fill struct literal with default values to the editor context menu"
              },
              "testAtCursor": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to run the test under the cursor to the editor context menu"
              },
              "testFile": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to run all tests in the current file to the editor context menu"
              },
              "testPackage": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to run all tests in the current package to the editor context menu"
              },
              "generateTestForFunction": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to generate unit tests for function under the cursor to the editor context menu"
              },
              "generateTestForFile": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to generate unit tests for current file to the editor context menu"
              },
              "generateTestForPackage": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to generate unit tests for currnt package to the editor context menu"
              },
              "addImport": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to import a package to the editor context menu"
              },
              "testCoverage": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to run test coverage to the editor context menu"
              },
              "playground": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to upload the current file or selection to the Go Playground"
              },
              "debugTestAtCursor": {
                "type": "boolean",
                "default": true,
                "description": "If true, adds command to debug the test under the cursor to the editor context menu"
              }
            },
            "additionalProperties": false,
            "default": {
              "toggleTestFile": true,
              "addTags": true,
              "removeTags": false,
              "testAtCursor": true,
              "testFile": false,
              "testPackage": false,
              "generateTestForFunction": true,
              "generateTestForFile": false,
              "generateTestForPackage": false,
              "addImport": true,
              "testCoverage": true,
              "playground": true,
              "debugTestAtCursor": true
            },
            "description": "Experimental Feature: Enable/Disable entries from the context menu in the editor.",
            "scope": "resource"
          },
          "go.gotoSymbol.ignoreFolders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Folder names (not paths) to ignore while using Go to Symbol in Workspace feature",
            "scope": "resource"
          },
          "go.delveConfig": {
            "type": "object",
            "properties": {
              "dlvLoadConfig": {
                "type": "object",
                "properties": {
                  "followPointers": {
                    "type": "boolean",
                    "description": "FollowPointers requests pointers to be automatically dereferenced",
                    "default": true
                  },
                  "maxVariableRecurse": {
                    "type": "number",
                    "description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
                    "default": 1
                  },
                  "maxStringLen": {
                    "type": "number",
                    "description": "MaxStringLen is the maximum number of bytes read from a string",
                    "default": 64
                  },
                  "maxArrayValues": {
                    "type": "number",
                    "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
                    "default": 64
                  },
                  "maxStructFields": {
                    "type": "number",
                    "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
                    "default": -1
                  }
                },
                "description": "LoadConfig describes to delve, how to load values from target's memory",
                "default": {
                  "followPointers": true,
                  "maxVariableRecurse": 1,
                  "maxStringLen": 64,
                  "maxArrayValues": 64,
                  "maxStructFields": -1
                }
              },
              "apiVersion": {
                "type": "number",
                "enum": [
                  1,
                  2
                ],
                "description": "Delve Api Version to use. Default value is 2.",
                "default": 2
              },
              "showGlobalVariables": {
                "type": "boolean",
                "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not.",
                "default": false
              }
            },
            "default": {
              "dlvLoadConfig": {
                "followPointers": true,
                "maxVariableRecurse": 1,
                "maxStringLen": 64,
                "maxArrayValues": 64,
                "maxStructFields": -1
              },
              "apiVersion": 2,
              "showGlobalVariables": false
            },
            "description": "Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.",
            "scope": "resource"
          },
          "go.alternateTools": {
            "type": "object",
            "default": {},
            "description": "Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools or versioned tools from https://gopkg.in.",
            "scope": "resource",
            "properties": {
              "go": {
                "type": "string",
                "default": "go",
                "description": "Alternate tool to use instead of the go binary or alternate path to use for the go binary."
              },
              "gocode": {
                "type": "string",
                "default": "gocode",
                "description": "Alternate tool to use instead of the gocode binary or alternate path to use for the gocode binary."
              },
              "gopkgs": {
                "type": "string",
                "default": "gopkgs",
                "description": "Alternate tool to use instead of the gopkgs binary or alternate path to use for the gopkgs binary."
              },
              "gopls": {
                "type": "string",
                "default": "gopls",
                "description": "Alternate tool to use instead of the gopls binary or alternate path to use for the gopls binary."
              },
              "go-outline": {
                "type": "string",
                "default": "go-outline",
                "description": "Alternate tool to use instead of the go-outline binary or alternate path to use for the go-outline binary."
              },
              "guru": {
                "type": "string",
                "default": "guru",
                "description": "Alternate tool to use instead of the guru binary or alternate path to use for the guru binary."
              }
            },
            "additionalProperties": true
          }
        }
      },
      "menus": {
        "editor/context": [
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.toggleTestFile && resourceLangId == go",
            "command": "go.toggle.test.file",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.addTags && resourceLangId == go",
            "command": "go.add.tags",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.removeTags && resourceLangId == go",
            "command": "go.remove.tags",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.fillStruct && resourceLangId == go",
            "command": "go.fill.struct",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.testAtCursor && resourceLangId == go && !config.editor.codeLens",
            "command": "go.test.cursor",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.benchmarkAtCursor && resourceLangId == go && !config.editor.codeLens",
            "command": "go.benchmark.cursor",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.debugTestAtCursor && resourceLangId == go && !config.editor.codeLens",
            "command": "go.debug.cursor",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.testFile && resourceLangId == go",
            "command": "go.test.file",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.testPackage && resourceLangId == go",
            "command": "go.test.package",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForFunction && resourceLangId == go",
            "command": "go.test.generate.function",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForFile && resourceLangId == go",
            "command": "go.test.generate.file",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForPackage && resourceLangId == go",
            "command": "go.test.generate.package",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.addImport && resourceLangId == go",
            "command": "go.import.add",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && config.go.editorContextMenuCommands.testCoverage && resourceLangId == go",
            "command": "go.test.coverage",
            "group": "Go group 1"
          },
          {
            "when": "editorTextFocus && resourceLangId == go",
            "command": "go.show.commands",
            "group": "Go group 2"
          }
        ]
      }
    }
  }
